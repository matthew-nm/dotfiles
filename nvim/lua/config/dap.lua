local dap = require('dap')

-- TUI
require("dapui").setup()

-- Python
require("dap-python").setup("uv") -- find python/venv via uv

-- Configurations
dap.configurations.python = {
  {
    type = 'python',
    request = 'attach',
    name = 'Python Local',
    host = '127.0.0.1', -- remote host IP
    port = 5678,        -- remote debug port
  },
  {
    type = 'python',
    request = 'attach',
    name = 'Python Remote: 5678',
    host = '127.0.0.1', -- remote host IP
    port = 5678,        -- remote debug port
    pathMappings = {
      { localRoot = vim.fn.getcwd(), remoteRoot = '/app' },
    },
  },
  {
    type = 'python',
    request = 'attach',
    name = 'Python Remote: 5679',
    host = '127.0.0.1', -- remote host IP
    port = 5679,        -- remote debug port
    pathMappings = {
      { localRoot = vim.fn.getcwd(), remoteRoot = '/app' },
    },
  },
}

-- Automatically re-attaching when attached app restarts
-- NOTE: does this make sense? generated by AI...
-- vim.api.nvim_create_autocmd("TermClose", {
--   callback = function()
--     require("dap").run_last()
--   end,
-- })

-- Define signs for DAP
local debug_icons = require("icons").debug
vim.fn.sign_define("DapBreakpoint", {
  text = debug_icons.breakpoint,
  texthl = "DapBreakpoint",
  linehl = "DapBreakpointLine",
  numhl = "DapBreakpointNum",
})
vim.fn.sign_define("DapBreakpointCondition", {
  text = debug_icons.condition,
  texthl = "DapBreakpointCondition",
  linehl = "DapBreakpointConditionLine",
  numhl = "DapBreakpointConditionNum",
})
vim.fn.sign_define("DapBreakpointRejected", {
  text = debug_icons.rejected,
  texthl = "DapBreakpointRejected",
  linehl = "DapBreakpointRejectedLine",
  numhl = "DapBreakpointRejectedNum",
})
vim.fn.sign_define("DapLogPoint", {
  text = debug_icons.log,
  texthl = "DapLogPoint",
  linehl = "DapLogPointLine",
  numhl = "DapLogPointNum",
})
vim.fn.sign_define("DapStopped", {
  text = debug_icons.stopped,
  texthl = "DapStopped",
  linehl = "DapStoppedLine",
  numhl = "DapStoppedNum",
})
